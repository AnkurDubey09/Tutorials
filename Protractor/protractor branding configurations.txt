Branding configurations using Protractor testing framework:

We have branding JSON file which has key/value information for color/background/border-color and for other CSS properties. Again
this file is being imported in the spec file and then verifying branding or application's default and custom CSS properties.

This is really great to verify these things quickly and n number of times.

First we need to create a JSON file for branding values in it, this file will have default branding's values and 
custom branding's values:

For example:

{
	"defaultCSS":{
		"label": {
			"color": "rgba(113, 113, 113, 1)"
		},
		"text_primary": {
			"color": "rgba(78, 78, 78, 1)"
		},
		"headers": {
			"h1": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h2": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h3": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h4": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h5": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h6": {
				"color": "rgba(46, 46, 46, 1)"
			}
		},
		"on_hover": {
			"color": "rgba(223, 36, 124, 1)",
			"fill": "rgb(223, 36, 124)"
		}
	},
	"customCSS":{
		"label": {
			"color": "rgba(113, 113, 113, 1)"
		},
		"text_primary": {
			"color": "rgba(78, 78, 78, 1)"
		},
		"headers": {
			"h1": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h2": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h3": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h4": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h5": {
				"color": "rgba(46, 46, 46, 1)"
			},
			"h6": {
				"color": "rgba(46, 46, 46, 1)"
			}
		},
		"on_hover": {
			"color": "rgba(223, 36, 124, 1)",
			"fill": "rgb(223, 36, 124)"
		}
	}
}

Now import this JSON file in your spec file as:

let brandingJson = require('./<file_name>.json');

And now we can expect the conditions in e2e for default and for custom branding:

// On load verification - default branding
expect(element(by.css('pb-measurement-tool:nth-of-type(1) svg[class*="svg-brand"] path[class*="st0"]')).getCssValue('color')).toBe(brandingJson.defaultCSS.createPanelContainer.measurement_tools.color);
expect(element(by.css('pb-measurement-tool:nth-of-type(2) svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.defaultCSS.createPanelContainer.measurement_tools.color);
expect(element(by.css('svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.defaultCSS.createPanelContainer.multiSelect.color);

// On hover verification - default branding
browser.actions().mouseMove(annotationPage.pointAnnotationTool).perform().then(()=>{
    expect(element(by.css('pb-annotation-tools-container pb-annotation-tool:nth-of-type(1) span>svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.defaultCSS.createPanelContainer.on_hover.color);
});
browser.actions().mouseMove(annotationPage.lineAnnotationTool).perform().then(()=>{
    expect(element(by.css('pb-annotation-tools-container pb-annotation-tool:nth-of-type(2) span>svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.defaultCSS.createPanelContainer.on_hover.color);
});


// On load verification - custom branding
expect(element(by.css('pb-measurement-tool:nth-of-type(1) svg[class*="svg-brand"] path[class*="st0"]')).getCssValue('color')).toBe(brandingJson.customCSS.createPanelContainer.measurement_tools.color);
expect(element(by.css('pb-measurement-tool:nth-of-type(2) svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.customCSS.createPanelContainer.measurement_tools.color);
expect(element(by.css('svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.customCSS.createPanelContainer.multiSelect.color);

// On hover verification - custom branding
browser.actions().mouseMove(annotationPage.pointAnnotationTool).perform().then(()=>{
    expect(element(by.css('pb-annotation-tools-container pb-annotation-tool:nth-of-type(1) span>svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.customCSS.createPanelContainer.on_hover.color);
});
browser.actions().mouseMove(annotationPage.lineAnnotationTool).perform().then(()=>{
    expect(element(by.css('pb-annotation-tools-container pb-annotation-tool:nth-of-type(2) span>svg[class*="svg-brand"] path[class*="cls-1"]')).getCssValue('color')).toBe(brandingJson.customCSS.createPanelContainer.on_hover.color);
});